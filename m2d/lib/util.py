import json
import re

def remove_empty_fields(l, script_name, field):
    if l[script_name][field] == {}:
        del l[script_name][field]

def remove_if_empty(dict):
    for d in dict.keys():
        for e in d.keys():
            if e == "null":
                
                del d

#I've noticed that the mm yaml keys always start with a capital letter
#so I've created this function to remove any keys that start with a capital letter
def remove_old_keys(l, script_name):
    
    for key in l[script_name].copy():
        
        if key[0].isupper():
            try_del(l[script_name], key)
    
    return l[script_name]

#Removes non-ascii characters
def remove_non_ascii(s):
    return "".join(c for c in s if ord(c)<128)

#Turn the mm supported color codes into dsc color codes
#Example: &e -> <&e>
#Example: <&sq> -/> <<&s>q>
def parse_color(string):
    regex = r"[&ยง][a-z1-9]"
    matches = re.finditer(regex, string, re.MULTILINE)
    for matchNum, match in enumerate(matches, start=1):
        match = match.group()
        try:
            if string[string.find(match) + 3] == '>':
                continue
        except:
            pass
        
        #New match to detect "ยง"
        matchNew = match.replace("ยง", "&")
        #Replace the color code with the dsc equivalent
        string = remove_non_ascii(string.replace(match, "<" + matchNew + ">").replace("<<", "<").replace(">>", ">"))
    #Send the string back to the oven
    return string

#Takes a completely empty string (usually lore) and 
#replaces it with dsc's empty string
def replace_empty(string):
    if string == "":
        #The <empty> tag is usually redundant, but it becomes extremely important here
        return "<empty>"
    else:
        return string

#Show lower usage of needed etcWorkers()
def bool_to_other(val, default):
    if val == "true" or val == True:
        return default
    else:
        return val

#Function to include a key in a dictionary if another key already exists within that dictionaryz
def include_if_exists(dictionary, old_dictionary, checking_key, key_to_set, value_to_set):
    if old_dictionary.get(checking_key) != None:
        dictionary[key_to_set] = value_to_set
    return dictionary

#Converts a string to a boolean
def str_to_bool(str):
    #If v is a boolean, return it
    if type(str) == bool:
        return str
    #Otherwise, convert it to a boolean
    else:
        #1. Lowercase the string
        #2. If it's "true", return true
        #3. If it isn't, return false
        return str.lower() == "true"


#Return a value from a dictionary if it exists, otherwise return a default value
def if_null_dict(dict, key, default):
    try:
        if key in dict:
            return dict[key]
        else:
            return default
    except:
        return "null"

#Python freaks out so this checks if it exists in the first place without calling the actual thing
def try_except_dict(dict):
    try:
        if json.load(dict) != None:
            return json.load(dict)
    except:
        return ""

#Try to delete a key from a dictionary, if the key is missing, do nothing
def try_del(dict, key):
    if key in dict:
        del dict[key]

#Return the opposite of a string
def str_not(string):
    if string == "true":
        return "false"
    elif string == "false":
        return "true"
    else:
        return "string not true or false"

#Return snake_case from camelCase
#(will be used later for container name formatting)
#Example: camelCase -> camel_case
#Code generated by Github Copilot ###Lets all say thanks to Copilot before it proceeds to charge us 70$ a month!!!###
def camel_case_to_snake_case(string):
    s1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', string)
    return re.sub('([a-z0-9])([A-Z])', r'\1_\2', s1).lower()
